# -*- coding: utf-8 -*-

from typing import TYPE_CHECKING, Dict, List

from .BaseService import BaseService, BaseServiceSender, BaseServiceStruct

if TYPE_CHECKING:
    from ..client import CHRLINE


class MultiProfileService(BaseService):
    __REQ_TYPE = 4
    __RES_TYPE = 4
    __ENDPOINT = "/PFS4"

    def __init__(self, client: "CHRLINE"):
        self.client = client
        self.__sender = BaseServiceSender(
            client,
            "MultiProfileService",
            self.__REQ_TYPE,
            self.__RES_TYPE,
            self.__ENDPOINT,
        )

    def deleteMultiProfile(
        self,
        profileId: str,
    ):
        """Delete multi profile."""
        METHOD_NAME = "deleteMultiProfile"
        params = [
            [11, 1, profileId],
        ]
        params = BaseServiceStruct.BaseRequest(params)
        return self.__sender.send(METHOD_NAME, params)

    def getMappedProfileIds(
        self,
        targetUserMids: List[str],
    ):
        """Get mapped profile ids."""
        METHOD_NAME = "getMappedProfileIds"
        params = [
            [15, 1, [11, targetUserMids]],
        ]
        params = BaseServiceStruct.BaseRequest(params)
        return self.__sender.send(METHOD_NAME, params)

    def mapProfileToUsers(
        self,
        profileId: str,
        targetUserMids: List[str],
    ):
        """Map profile to users."""
        METHOD_NAME = "mapProfileToUsers"
        params = [
            [11, 1, profileId],
            [15, 2, [11, targetUserMids]],
        ]
        params = BaseServiceStruct.BaseRequest(params)
        return self.__sender.send(METHOD_NAME, params)

    def updateProfileAttributesByProfileId(
        self,
        profileId: str,
        profileAttributes: Dict[str, str],
    ):
        """Update profile attributes."""
        METHOD_NAME = "updateProfileAttributes"
        params = [
            [8, 1, self.client.getCurrReqId()],
            [13, 2, [8, 12, profileAttributes]],
            [11, 3, profileId],
        ]
        params = BaseServiceStruct.BaseRequest(params)
        return self.__sender.send(METHOD_NAME, params)

    def createMultiProfile(
        self,
        displayName: str,
    ):
        """Create multi profile."""
        METHOD_NAME = "createMultiProfile"
        params = [[11, 1, displayName]]
        params = BaseServiceStruct.BaseRequest(params)
        return self.__sender.send(METHOD_NAME, params)

    def deleteUsersFromMultiProfileMapping(self):
        """
        AUTO_GENERATED_CODE! DONT_USE_THIS_FUNC!!

        GENERATED BY YinMo0913_DeachSword-DearSakura_v1.0.6.py
        DATETIME: 10/31/2024, 14:52:45
        """
        raise Exception("deleteUsersFromMultiProfileMapping is not implemented")
        METHOD_NAME = "deleteUsersFromMultiProfileMapping"
        params = []
        sqrd = self.generateDummyProtocol(
            METHOD_NAME, params, self.ProfileService_REQ_TYPE
        )
        return self.postPackDataAndGetUnpackRespData(
            self.ProfileService_API_PATH, sqrd, self.ProfileService_RES_TYPE
        )

    def getProfiles(self, syncReason: int):
        """Get profiles."""
        METHOD_NAME = "getProfiles"
        __AGBY = "DS:v1.0.7:10/31/2024, 14:52:45"
        request = [[8, 1, syncReason]]
        params = [[12, 1, request]]
        params = BaseServiceStruct.BaseRequest(params)
        return self.__sender.send(METHOD_NAME, params)

    def getProfile(self, profileId: str):
        """Get profile."""
        METHOD_NAME = "getProfile"
        __AGBY = "DS:v1.0.7:10/31/2024, 14:52:45"
        request = [[11, 1, profileId]]
        params = [[12, 1, request]]
        params = BaseServiceStruct.BaseRequest(params)
        return self.__sender.send(METHOD_NAME, params)

    def getUsersMappedByProfile(self, profileId: str, syncReason: int):
        """Get users mapped by profile."""
        METHOD_NAME = "getUsersMappedByProfile"
        __AGBY = "DS:v1.0.7:10/31/2024, 14:52:45"
        request = [[11, 1, profileId], [8, 2, syncReason]]
        params = [[12, 1, request]]
        params = BaseServiceStruct.BaseRequest(params)
        return self.__sender.send(METHOD_NAME, params)
